With the array with n elements, sort it with an algorithm that takes at max n² times to execute (for example, bubble sort). After the array is sorted, loop within the array in a way that o can get every pair of it (ie: 1st element and 2nd element, then 1st element and 3nd element... 1st element and n-rd element, the 2st element and 3st element...), not repeating pairs. With a pair, calculate the 3rt pair should be and if this 3rt pair is greater than the 2nd element from the pair (because the array is sorted and we should avoid repeating triples), then search if this calculated elements exists in the array, with binary search algorithm. If exists, then this would be a triple that satisfied the 3-SUM problem.

With a sorted algorithm which takes n² and with the binary search algorithm, this algorithms would take n² log n times in the worst scenario, which is proportional to n².